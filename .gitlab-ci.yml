default:
  image:
    name: $KQC_IMAGE_REPOSITORY
    entrypoint: ['']
  cache:
    key: "$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG"
    paths:
      - .pip-cache
  before_script:
    - ci/init_kqc.sh
  tags:
    - docker

test:
  stage: test
  parallel:
    matrix:
      - KLAYOUT_VERSION: [klayout28, klayout29, latest]
  script:
    - if [ $KLAYOUT_VERSION != "latest" ]; then pip install --force-reinstall -r "ci/requirements/${KLAYOUT_VERSION}-requirements.txt"; fi
    - tox -e matrix
  artifacts:
    reports:
      junit: test_report.xml
  only:
    - master
    - merge_requests
    - tags
  except:
    - schedules

static_analysis:
  stage: test
  script:
    - pip install -r ci/requirements/pylint-gitlab-requirements.txt
    - export CODEQUALITY_JSON=codeclimate.json
    - >
      tox -e static_analysis --
      --exit-zero
      --output-format=pylint_gitlab.GitlabCodeClimateReporter
      --output=
    - if [ $(jq '. | length' $CODEQUALITY_JSON) != "0" ]; then exit 1; else exit 0; fi  # raise error if not empty
  artifacts:
    reports:
      codequality: codeclimate.json
    when: always
  only:
    - master
    - merge_requests
    - tags
  except:
    - schedules

shell_check:
  stage: test
  script:
    - find . -type f \( -name '*.sh' \) | xargs shellcheck
  only:
    - master
    - merge_requests
    - tags
  except:
    - schedules

layer_properties:
  stage: test
  script:
    - python util/check_layer_props.py
  only:
    - master
    - merge_requests
    - tags
  except:
    - schedules

verify_documentation:
  stage: test
  script:
    - cd docs
    - make html SPHINXOPTS="-W --keep-going"
  after_script:
    - echo "See documentation at $KQC_GITLAB_PAGES/-/jobs/$CI_JOB_ID/artifacts/docs/_build/html/index.html"
  artifacts:
    expose_as: 'HTML docs PNG and OAS files'
    paths:
    - docs/pcell_images/
    - docs/_build/html/
    expire_in: 1 week
    when: always
  only:
    - merge_requests
  except:
    - schedules

check_package_building:
  stage: test
  script:
    - python -m pip install -r ci/requirements/twine-requirements.txt
    - cd klayout_package/python
    - python -m build
    - python -m twine check dist/*
  only:
    - merge_requests
  except:
    - schedules

check_confidential_strings:
  stage: test
  variables:
    GIT_DEPTH: 0
    GIT_STRATEGY: clone
    FILTER_BRANCH_SQUELCH_WARNING: 1
  script:
    - >
      bash ci/check_files_for_strings.sh "$KQC_CONFIDENTIAL_STRINGS"
      "remotes/origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" "remotes/origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  except:
    - schedules

check_copyright_headers:
  stage: test
  script:
    - >
      python ci/check_copyright_headers.py --exclude-paths
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  except:
    - schedules

check_license:
  stage: test
  script:
    - sha256sum -c ci/license_manifest.txt
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  except:
    - schedules

pages:
  stage: deploy
  script:
    - Xvfb :99 -screen 0 640x480x24 -nolisten tcp &
    - cd docs
    - make html SPHINXOPTS="-W --keep-going"
    - find _build/html -name "*.html" -exec sed -i "s#github.com/iqm-finland/KQCircuits#$KQC_REPOSITORY_STRING#g" {} +
    - mv _build/html ../public
  artifacts:
    paths:
    - public
  only:
    - master
  except:
    - schedules

.kaniko:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json

deploy_image:
  extends: .kaniko
  stage: deploy
  script:
    - |
      if expr $CI_COMMIT_REF_NAME : "v[0-9]\+.\?[0-9]\+\?.\?[0-9]\+\?" ; then
          export "LATEST=--destination $CI_REGISTRY_IMAGE:latest"
      fi
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/ci/Dockerfile
      --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
      --cache-repo=$CI_REGISTRY_IMAGE/cache
      --cache=true
      --build-arg KL_FILE=klayout_0.30.1-1_amd64.deb
      --build-arg KL_HASH=11953ce5009a0e83f9840b506f80df49
      $LATEST
  only:
    - master
    - tags
  except:
    - schedules

test_image:
  extends: .kaniko
  stage: test
  script:
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/ci/Dockerfile
      --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
      --cache-repo=$CI_REGISTRY_IMAGE/cache
      --cache=true
      --build-arg KL_FILE=klayout_0.30.1-1_amd64.deb
      --build-arg KL_HASH=11953ce5009a0e83f9840b506f80df49
      --no-push
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  except:
    - schedules

copy_github_issues:
  stage: test
  before_script:
    - pip install -r ci/requirements/requests-requirements.txt
  script:
    - python ci/copy_github_issues.py $ACCESS_TOKEN ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/issues $LABELS
  only:
    - schedules
  except:
    - tags
    - merge_requests

get_internal_jobs:
  stage: build
  before_script:
    - echo "Skip default before_script"
  script:
    - bash -c "${INTERNAL_JOB_COMMAND}"
  artifacts:
    paths:
      - internal-jobs.yml
  only:
    - merge_requests
  except:
    - tags
    - schedules
    - master

run_internal_jobs:
  trigger:
    include:
      - artifact: internal-jobs.yml
        job: get_internal_jobs
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
